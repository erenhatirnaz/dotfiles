;; -*-lisp-*-
(in-package :stumpwm)

(set-module-dir "/home/eh/.config/stumpwm/contrib")
(load-module "net")
(load-module "pass")
(load-module "mem")
(load-module "clipboard-history")
(load-module "numpad-layouts")

;; ignore size hints
(setf *ignore-wm-inc-hints* :t)

;; set border style, sizes and colors
(setf *window-border-style* :thin
      *maxsize-border-width* 1
      *normal-border-width* 3
      *transient-border-width* 4)
(set-focus-color "#D65D0E")
(set-unfocus-color "#1d2021")

;; set background and foreground colors
(set-bg-color "#282828")
(set-fg-color "#FBF1C7")

;; everything is in the center
(setf *input-window-gravity* :center
      *message-window-gravity* :center
      *message-window-input-gravity* :center)

;; set font
(set-font "-*-terminus-bold-r-normal-*-16-*-*-*-*-*-*-*")

;; show only cpu usage and tempeture
(load-module "cpu")
(setf cpu::*cpu-modeline-fmt* "%c %t")

;; minus sign is enough when no battery info
(load-module "battery-portable")
(setf battery-portable::*no-battery-info* "-")
(setf battery-portable::*non-preferred-drivers-failed* :t)

;; Show only 6 character of window title in modeline
(setf *window-format* "%m%n%s%6t")

;; Set `mode-line' colors and toggle toggle `mode-line' for current screen (monitor).
(setf *mode-line-foreground-color* "#D65D0E"
      *mode-line-background-color* "#282828"
      *mode-line-border-color* "#665c54"
      *mode-line-timeout* 5
      *time-modeline-string* "^B%a â€¢ %d.%m.%y %k:%M:%S^b^n"
      *screen-mode-line-format* "[^B%n^b] %W ^> [%l] [%C] [%M] [BAT1: %B] ^n[%d]")
(enable-mode-line (current-screen) (current-head) t)

;; toggle gaps
(load-module "swm-gaps")
(define-key *root-map* (kbd "u") "toggle-gaps")

;; Emacs-like command execute menu keybinding. Use 'C-t M-x' instead of 'C-t ;'
(undefine-key *root-map* (kbd ";"))
(define-key *root-map* (kbd "M-x") "colon")

;; Use 'C-t C-r' to reload configuration
(define-key *root-map* (kbd "C-r") "loadrc")

;; xterm -> alacritty
(undefine-key *root-map* (kbd "c"))
(undefine-key *root-map* (kbd "C-c"))
(define-key *root-map* (kbd "c") "exec alacritty")
(define-key *root-map* (kbd "C-c") "exec alacritty")

;; Volume controls
(load-module "amixer")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Master-1-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Master-1+")
(define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle pulse")

;; Player controls
(define-key *top-map* (kbd "XF86AudioPlay") "exec playerctl play-pause")
(define-key *top-map* (kbd "XF86AudioNext") "exec playerctl next")
(define-key *top-map* (kbd "XF86AudioPrev") "exec playerctl previous")

;; Screenshot utils
(define-key *top-map* (kbd "SunPrint_Screen") "exec ksnip -m")
(define-key *top-map* (kbd "C-SunPrint_Screen") "exec ksnip -r")

;; Calculator
(define-key *top-map* (kbd "XF86Calculator") "exec speedcrunch")

;; Enable or disable HDMI output when pressed function key under F2
(defcommand xrandr-enable-hdmi-output () ()
  (run-shell-command "xrandr --output HDMI-2 --auto --right-of eDP-1"))

(defcommand xrandr-disable-hdmi-output () ()
  (run-shell-command "xrandr --output HDMI-2 --off"))

(define-key *top-map* (kbd "s-p") "xrandr-enable-hdmi-output")
(define-key *top-map* (kbd "s-P") "xrandr-disable-hdmi-output")

;; Open new emacs instance instead of raise
(undefine-key *root-map* (kbd "e"))
(undefine-key *root-map* (kbd "C-e"))
(define-key *root-map* (kbd "e") "exec emacs")
(define-key *root-map* (kbd "C-e") "exec emacs")

;; Focus with mouse click
(setf *mouse-focus-policy* :click)

;; bugfix for scrolling doesn't work with an external mouse in GTK+3 apps.
(setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")

;; C-t C-g f for create new float group
(define-key *groups-map* (kbd "f") "gnew-float")

;; Utilities
(define-key *root-map* (kbd "M") "pass-copy-menu")
(define-key *root-map* (kbd "z") "exec boomer")
(define-key *root-map* (kbd "C-y") "show-clipboard-history")

;; I <3 Rofi
(define-key *top-map* (kbd "Menu") "exec rofi -show drun -matching fuzzy")
(define-key *top-map* (kbd "C-Menu") "exec rofi-bluetooth")
(define-key *top-map* (kbd "M-Menu") "exec rofi -modi emoji -show emoji")

;; Implement `launch-map' for launch some common used applications. C-t L
(defvar *launch-top-map* nil)
(defvar *launch-root-map* nil)
(defvar *launch-map* nil)

(fill-keymap *launch-map*
             (kbd "f") "exec firefox"
             (kbd "d") "exec firefox-developer-edition"
             (kbd "q") "exec qutebrowser"
             (kbd "v") "exec vivaldi"
             (kbd "c") "exec chromium"
             (kbd "t") "exec thunderbird"
             (kbd "n") "exec nautilus"
             (kbd "T") "exec telegram-desktop"
             (kbd "g") "exec gimp"
             (kbd "s") "exec spotify"
             (kbd "c") "exec speedcrunch"
             (kbd "v") "exec vscodium"
             (kbd "C-d") "exec env GTK_THEME=Adwaita:light dbeaver"
             (kbd "o") "exec rofi -show drun -matching fuzzy"
             (kbd "ESC") "keyboard-quit"
             (kbd "C-g") "keyboard-quit")
(define-key *root-map* (kbd "L") '*launch-map*)

;; Implement `renumber-map' for renumber windows. ~C-t M-u~
(defvar *renumber-top-map* nil)
(defvar *renumber-root-map* nil)
(defvar *renumber-map* nil)

(fill-keymap *renumber-map*
             (kbd "0") "renumber 0"
             (kbd "1") "renumber 1"
             (kbd "2") "renumber 2"
             (kbd "3") "renumber 3"
             (kbd "4") "renumber 4"
             (kbd "5") "renumber 5"
             (kbd "6") "renumber 6"
             (kbd "7") "renumber 7"
             (kbd "8") "renumber 8"
             (kbd "9") "renumber 9"
             (kbd "ESC") "keyboard-quit"
             (kbd "C-g") "keyboard-quit")
(define-key *root-map* (kbd "M-u") '*renumber-map*)

;; initializing setup
(when *initializing*
  (grename "HOME")
  (dolist (group '("CODE" "MEDIA" "WEB" "CHAT"))
    (gnewbg group))
  (gselect "1"))

(clipboard-history:start-clipboard-manager)
