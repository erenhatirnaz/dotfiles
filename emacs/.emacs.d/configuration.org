#+TITLE: My Emacs Configuration
#+OPTIONS: num:nil

* Set personal informations
  #+BEGIN_SRC emacs-lisp
		(setq user-full-name "Eren Hatırnaz"
					user-mail-address "erenhatirnaz@hotmail.com.tr"
					calendar-week-start-day 1)
  #+END_SRC
* Use =sensible-defaults.el=
  #+BEGIN_SRC emacs-lisp
		(load-file "~/.emacs.d/sensible-defaults.el")

		(sensible-defaults/increase-gc-threshold)
		(sensible-defaults/delete-trailing-whitespace)
		(sensible-defaults/treat-camelcase-as-separate-words)
		(sensible-defaults/automatically-follow-symlinks)
		(sensible-defaults/make-scripts-executable)
		(sensible-defaults/single-space-after-periods)
		(sensible-defaults/offer-to-create-parent-directories-on-save)
		(sensible-defaults/apply-changes-to-highlighted-region)
		(sensible-defaults/overwrite-selected-text)
		(sensible-defaults/ensure-that-files-end-with-newline)
		(sensible-defaults/confirm-closing-emacs)
		(sensible-defaults/quiet-startup)
		(sensible-defaults/make-dired-file-sizes-human-readable)
		(sensible-defaults/shorten-yes-or-no)
		(sensible-defaults/always-highlight-code)
		(sensible-defaults/refresh-buffers-when-files-change)
		(sensible-defaults/show-matching-parens)
		(sensible-defaults/yank-to-point-on-mouse-click)
		(sensible-defaults/flash-screen-instead-of-ringing-bell)

		(sensible-defaults/set-default-line-length-to 81)
  #+END_SRC
* Utility functions
  #+BEGIN_SRC emacs-lisp
		(defun utils/generate-scratch-buffer ()
			"Create and switch to a temporary scratch buffer with a random
		name."
			(interactive)
			(switch-to-buffer (make-temp-name "scratch-")))

		(defun utils/kill-current-buffer ()
			"Kill the current buffer without prompting."
			(interactive)
			(kill-buffer (current-buffer)))
  #+END_SRC
* Display settings
** Tweak window chrome
#+BEGIN_SRC emacs-lisp
	(tool-bar-mode 0)
	(menu-bar-mode 0)

	(set-scroll-bar-mode 'right)
#+END_SRC
** Customize faces
Change scroll-bar face
#+BEGIN_SRC emacs-lisp
	(set-face-foreground 'scroll-bar "darkorange")
#+END_SRC

Change cursor face
#+BEGIN_SRC emacs-lisp
	(set-face-background 'cursor "darkorange")
#+END_SRC
** Use fancy lambdas
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Load theme
#+BEGIN_SRC emacs-lisp
	(load-theme 'gruvbox-dark-medium t)
#+END_SRC
** Set default font and configure font resizing
#+BEGIN_SRC emacs-lisp
	(setq hrs/default-font "JetBrains Mono")
	(setq hrs/default-font-size 12)
	(setq hrs/current-font-size hrs/default-font-size)

	(setq hrs/font-change-increment 1.1)

	(defun hrs/font-code ()
		"Return a string representing the current font (like \"Inconsolata-14\")."
		(concat hrs/default-font "-" (number-to-string hrs/current-font-size)))

	(defun hrs/set-font-size ()
		"Set the font to `hrs/default-font' at `hrs/current-font-size'.
	Set that for the current frame, and also make it the default for
	other, future frames."
		(let ((font-code (hrs/font-code)))
			(add-to-list 'default-frame-alist (cons 'font font-code))
			(set-frame-font font-code)))

	(defun hrs/reset-font-size ()
		"Change font size back to `hrs/default-font-size'."
		(interactive)
		(setq hrs/current-font-size hrs/default-font-size)
		(hrs/set-font-size))

	(defun hrs/increase-font-size ()
		"Increase current font size by a factor of `hrs/font-change-increment'."
		(interactive)
		(setq hrs/current-font-size
		(ceiling (* hrs/current-font-size hrs/font-change-increment)))
		(hrs/set-font-size))

	(defun hrs/decrease-font-size ()
		"Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
		(interactive)
		(setq hrs/current-font-size
		(max 1
				 (floor (/ hrs/current-font-size hrs/font-change-increment))))
		(hrs/set-font-size))

	(define-key global-map (kbd "C-)") 'hrs/reset-font-size)
	(define-key global-map (kbd "C-+") 'hrs/increase-font-size)
	(define-key global-map (kbd "C-=") 'hrs/increase-font-size)
	(define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
	(define-key global-map (kbd "C--") 'hrs/decrease-font-size)

	(hrs/reset-font-size)
#+END_SRC

** Scroll conservatively
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Disable visual bell
#+BEGIN_SRC emacs-lisp
	(setq ring-bell-function 'ignore)
#+END_SRC
** Highlight the current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC
** Hide certain modes from the modeline
#+BEGIN_SRC emacs-lisp
	(defmacro diminish-minor-mode (filename mode &optional abbrev)
		`(eval-after-load (symbol-name ,filename)
			 '(diminish ,mode ,abbrev)))

	(defmacro diminish-major-mode (mode-hook abbrev)
		`(add-hook ,mode-hook
				 (lambda () (setq mode-name ,abbrev))))

	(diminish-minor-mode 'abbrev 'abbrev-mode)
	(diminish-minor-mode 'eldoc 'eldoc-mode)
	(diminish-minor-mode 'simple 'auto-fill-function)
	(diminish-minor-mode 'company 'company-mode)
	(diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
	(diminish-minor-mode 'projectile 'projectile-mode)
	(diminish-minor-mode 'subword 'subword-mode)
	(diminish-minor-mode 'undo-tree 'undo-tree-mode)
	(diminish-minor-mode 'wrap-region 'wrap-region-mode)

	(diminish-minor-mode 'paredit 'paredit-mode " π")

	(diminish-major-mode 'emacs-lisp-mode-hook "el")
	(diminish-major-mode 'lisp-interaction-mode-hook "λ")
#+END_SRC
** Highlight uncommitted changes
#+BEGIN_SRC emacs-lisp
	(use-package diff-hl
		:init
		(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
		(add-hook 'vc-dir-hook 'turn-on-diff-hl-mode)
		(add-hook 'dired-mode-hook 'diff-hl-dired-mode))
#+END_SRC
** Show line numbers only programming mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Show line and column numbers in modeline
#+BEGIN_SRC emacs-lisp
	(column-number-mode t)
#+END_SRC
** Show indent guides
#+BEGIN_SRC emacs-lisp
	(use-package indent-guide
		:diminish
		:init
		(indent-guide-global-mode))
#+END_SRC
** Golden ratio for windows
#+BEGIN_SRC emacs-lisp
	(use-package golden-ratio
		:diminish golden-ratio-mode
		:init
		(golden-ratio-mode 1))
#+END_SRC

Trigger =golden-ratio= when opened new window
#+BEGIN_SRC emacs-lisp
	;; (define-advice select-window (:after (window &optional no-record) golden-ratio-resize-window)
	;; 	(golden-ratio)
	;; 	nil)
	(add-to-list 'window-size-change-functions 'golden-ratio)
#+END_SRC
** Change title to project name
Emacs default title isn't helpfull for working with multiple frames
so I maked more helpfull title.

#+BEGIN_SRC emacs-lisp
	(setq frame-title-format
		'(""
			"%b"
			(:eval
			 (let ((project-name (projectile-project-name)))
				 (unless (string= "-" project-name)
					 (format " in [%s]" project-name))))
			" -- emacs"))
#+END_SRC
** Configure =whitespace-mode=
#+BEGIN_SRC emacs-lisp
	(defun set-whitespace-style ()
		(setq whitespace-style '(face tabs spaces trailing space-before-tab
																	newline indentation empty space-after-tab
																	space-mark tab-mark)))

	(add-hook 'whitespace-mode-hook 'set-whitespace-style)
	(add-hook 'prog-mode-hook 'whitespace-mode)

	(global-set-key (kbd "C-c w") 'whitespace-mode)
#+END_SRC
** Display battery informations on modeline
	 #+BEGIN_SRC emacs-lisp
		 (setq battery-mode-line-format "[%b%p%% - %t]")
		 (display-battery-mode :t)
	 #+END_SRC
** =all-the-icons=
	 #+BEGIN_SRC emacs-lisp
		 (use-package all-the-icons)
		 (use-package all-the-icons-dired
			 :hook (dired-mode . all-the-icons-dired-mode)
			 :diminish)
	 #+END_SRC
** List directories first on dired mode
	 #+BEGIN_SRC emacs-lisp
		 (defun directory-first-sort ()
			 "Sort dired listings with directories first."
			 (save-excursion
				 (let (buffer-read-only)
					 (forward-line 2) ;; beyond dir. header
					 (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
				 (set-buffer-modified-p nil)))

		 (defadvice dired-readin
			 (after dired-after-updating-hook first () activate)
			 "Sort dired listings with directories first before adding marks."
			 (directory-first-sort))
	 #+END_SRC
** =treemacs=
   Use =treemacs= to tree view panel:
	 #+BEGIN_SRC emacs-lisp
	   (defun treemacs-ignore-tags-files (filename absolute-path)
	     (or (string-equal filename "GPATH")
		 (string-equal filename "GTAGS")
		 (string-equal filename "GRTAGS")))

	   (defun treemacs-ignore-node_modules (filename absolute-path)
	     (string-equal filename "node_modules"))

	   (use-package treemacs
	     :bind
	     (:map global-map
		   ("M-0" . treemacs-select-window))
	     :config
	     (progn
	       (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-tags-files)
	       (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-node_modules)))
	 #+END_SRC
* Programming environments
  #+BEGIN_SRC emacs-lisp
		(setq-default tab-width 2)
  #+END_SRC

** Javascript
Indent 2 spaces

#+BEGIN_SRC emacs-lisp
	(setq js-indent-level 2)
#+END_SRC
** Lisps
#+BEGIN_SRC emacs-lisp
	(setq lispy-mode-hooks
				'(clojure-mode-hook
					emacs-lisp-mode-hook
					lisp-mode-hook
					scheme-mode-hook))

	(dolist (hook lispy-mode-hooks)
		(add-hook hook (lambda ()
										 (setq show-paren-style 'expression)
										 (paredit-mode)
										 (rainbow-delimiters-mode))))
#+END_SRC
** =sh=
Indent with 2 spaces.
#+BEGIN_SRC emacs-lisp
	(add-hook 'sh-mode-hook
						(lambda ()
							(setq sh-basic-offset 2
										sh-indentation 2)))
#+END_SRC
** =git-commit=
#+BEGIN_SRC emacs-lisp
	(use-package git-commit)
#+END_SRC
** =yaml-mode=
#+BEGIN_SRC emacs-lisp
	(use-package yaml-mode
		:init
		(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC
** Folding
#+BEGIN_SRC emacs-lisp
	(use-package origami
		:bind (("C-c o t" . 'origami-toggle-node)
					 ("C-c o o" . 'origami-open-node)
					 ("C-c o c" . 'origami-close-node)
					 ("C-c o O" . 'origami-open-all-nodes)
					 ("C-c o C" . 'origami-close-all-nodes))

		:config
		(add-to-list 'origami-parser-alist '(sh-mode . origami-c-style-parser))
		:init
		(global-origami-mode))
#+END_SRC
** =yasnippet=
#+BEGIN_SRC emacs-lisp
	(use-package yasnippet
		:diminish yas-minor-mode
		:config (setq yas-snippet-dirs
									'("~/.emacs.d/snippets/"
										))
		:init
		(yas-global-mode t)
		(yas-reload-all))
#+END_SRC
** =ggtags=
	 #+BEGIN_SRC emacs-lisp
		 (use-package ggtags)
	 #+END_SRC
* Terminal
Use =multi-term= to manage my shell sessions.
#+BEGIN_SRC emacs-lisp
	(use-package multi-term
		:bind (("C-c t" . multi-term)))
#+END_SRC

Add usefull hooks:

- Clickable links
- Yanking in =term-mode=
- =M-o= for switch window

#+BEGIN_SRC emacs-lisp
	(defun me/term-paste (&optional string)
		(interactive)
		(process-send-string
		 (get-buffer-process (current-buffer))
		 (if string string (current-kill 0))))

	(add-hook 'term-mode-hook
						(lambda ()
							(goto-address-mode)
							(define-key term-raw-map (kbd "C-y") 'me/term-paste)
							(define-key term-raw-map (kbd "<mouse-2>") 'me/term-paste)
							(define-key term-raw-map (kbd "M-o") 'other-window)))
#+END_SRC
* Org-mode
** Display preferences
Pretty bullets instead of a list of asterisks
#+BEGIN_SRC emacs-lisp
	(use-package org-bullets
		:init
		(add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC

Little downward-pointing arrow instead of the usual ellipsis(=...=)
#+BEGIN_SRC emacs-lisp
	(setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

No space before tags:
#+BEGIN_SRC emacs-lisp
	(setq org-tags-column 0)
#+END_SRC

UTF-8 entities
#+BEGIN_SRC emacs-lisp
	(setq org-pretty-entities t)
#+END_SRC

** Exporting
	 Disable validate
** =org-cliplink=
#+BEGIN_SRC emacs-lisp
	(use-package org-cliplink
		:bind (("C-x p i" . 'org-cliplink)))
#+END_SRC
* Navigating
** Configure =avy=
#+BEGIN_SRC emacs-lisp
	(use-package avy
		:bind (("C-c a c" . 'avy-goto-char)
					 ("C-c a l" . 'avy-goto-line)))
#+END_SRC
** Smooth Scrolling
[[https://www.emacswiki.org/emacs/SmoothScrolling][Source]]

5 line at a time:
#+BEGIN_SRC emacs-lisp
	(setq mouse-wheel-scroll-amount '(5 ((shift) . 5)))
#+END_SRC

Don't accelerate scrolling:
#+BEGIN_SRC emacs-lisp
	(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Scroll window under mouse:
#+BEGIN_SRC emacs-lisp
	(setq mouse-wheel-follow-mouse 't)
#+END_SRC

Keyboard scroll 5 line at time:
#+BEGIN_SRC emacs-lisp
	(setq scroll-step 1)
#+END_SRC
* Editing preferences
** =utf-8= everywhere
	 #+BEGIN_SRC emacs-lisp
		 (prefer-coding-system 'utf-8)
		 (set-default-coding-systems 'utf-8)
		 (set-terminal-coding-system 'utf-8)
		 (set-keyboard-coding-system 'utf-8)
		 (setq default-buffer-file-coding-system 'utf-8)
	 #+END_SRC
** Always delete active region
#+BEGIN_SRC emacs-lisp
	(setq delete-active-region nil)
	(delete-selection-mode t)
#+END_SRC
** Always kill current buffer
#+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "C-x k") 'utils/kill-current-buffer)
#+END_SRC
** Save my location within a file
#+BEGIN_SRC emacs-lisp
	(save-place-mode t)
#+END_SRC
** Ignore case-sensivity when find file
#+BEGIN_SRC emacs-lisp
	(setq read-file-name-completion-ignore-case t)
#+END_SRC
** Configure =which-key=
#+BEGIN_SRC emacs-lisp
	(use-package which-key
		:diminish
		:init
		(which-key-mode))
#+END_SRC
** Configure =ido-mode=
#+BEGIN_SRC emacs-lisp
	(use-package flx-ido
		:config (setq ido-enable-flex-matching t
									ido-use-faces nil
									ido-auto-merge-work-directories-length -1)
		:init
		(ido-mode t)
		(ido-everywhere t)
		(flx-ido-mode t))
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
	(use-package smex
		:bind (("M-x" . 'smex))
		:init)
#+END_SRC
** =editorconfig= everywhere
#+BEGIN_SRC emacs-lisp
	(use-package editorconfig
		:diminish
		:config
		(editorconfig-mode t))
#+END_SRC
** Always =server-mode=
#+BEGIN_SRC emacs-lisp
	(use-package server
		:config (or (server-running-p) (server-mode)))
#+END_SRC
** =undo-tree=
#+BEGIN_SRC emacs-lisp
	(use-package undo-tree
		:init
		(global-undo-tree-mode))
#+END_SRC
** Move text up or down
#+BEGIN_SRC emacs-lisp
	(use-package move-text
		:init
		(move-text-default-bindings))
#+END_SRC
* Project management
** Use =company-mode= everywhere
#+BEGIN_SRC emacs-lisp
	(use-package company
		:init
		(global-company-mode t))
#+END_SRC
** Configure =projectile=
#+BEGIN_SRC emacs-lisp
	(use-package projectile
		:bind (("C-c p" . projectile-command-map))
		:init
		(projectile-mode +1))
#+END_SRC
** Configure =magit=
#+BEGIN_SRC emacs-lisp
	(use-package magit
		:bind (("C-x g" . magit-status)))
#+END_SRC
* Set custom keybindings
#+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "M-o") 'other-window)
#+END_SRC
* Backup
Change backup files location
#+BEGIN_SRC emacs-lisp
	(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
* =browse-url.el=
Set default browser to =qutebrowser=
#+BEGIN_SRC emacs-lisp
	(setq browse-url-browser-function 'browse-url-generic
				browse-url-generic-program "qutebrowser")
#+END_SRC
