#+TITLE: My Emacs Configuration

* Set personal informations
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Eren Hatırnaz"
          user-mail-address "erenhatirnaz@hotmail.com.tr"
          calendar-week-start-day 1)
  #+END_SRC
* Use =sensible-defaults.el=
  =sensible-default.el= is some kind of =normalize= function set. See [[https://github.com/hrs/sensible-defaults.el][this
  repository]] for more information.

  #+BEGIN_SRC emacs-lisp
    (require 'url)

    (let ((file-name "~/.emacs.d/sensible-defaults.el")
          (url "https://raw.githubusercontent.com/hrs/sensible-defaults.el/main/sensible-defaults.el"))
      (if (not (file-exists-p file-name))
          (progn
            (url-copy-file url file-name)
            (message "File downloaded from %s to %s and loaded!" url file-name))
        (message "%s is already exists, no need to download!" file-name)))

    (load-file "~/.emacs.d/sensible-defaults.el")

    (sensible-defaults/increase-gc-threshold)
    (sensible-defaults/delete-trailing-whitespace)
    (sensible-defaults/treat-camelcase-as-separate-words)
    (sensible-defaults/automatically-follow-symlinks)
    (sensible-defaults/make-scripts-executable)
    (sensible-defaults/single-space-after-periods)
    (sensible-defaults/offer-to-create-parent-directories-on-save)
    (sensible-defaults/apply-changes-to-highlighted-region)
    (sensible-defaults/overwrite-selected-text)
    (sensible-defaults/ensure-that-files-end-with-newline)
    (sensible-defaults/confirm-closing-emacs)
    (sensible-defaults/quiet-startup)
    (sensible-defaults/make-dired-file-sizes-human-readable)
    (sensible-defaults/shorten-yes-or-no)
    (sensible-defaults/always-highlight-code)
    (sensible-defaults/refresh-buffers-when-files-change)
    (sensible-defaults/show-matching-parens)
    (sensible-defaults/yank-to-point-on-mouse-click)
    (sensible-defaults/flash-screen-instead-of-ringing-bell)
    (sensible-defaults/set-default-line-length-to 81)
  #+END_SRC
* Utility functions
  #+BEGIN_SRC emacs-lisp
    (defun eren/generate-scratch-buffer ()
      "Create and switch to a temporary scratch buffer with a random
    name."
      (interactive)
      (switch-to-buffer (make-temp-name "scratch-")))

    (defun eren/kill-current-buffer ()
      "Kill the current buffer without prompting."
      (interactive)
      (kill-buffer (current-buffer)))
  #+END_SRC
** Sources
   - =generate-scratch-buffer= and =kill-current-buffer= from [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org#utility-functions][hrs/dotfiles]].

* Display settings
** Disable GUI components
   I don't like to see menu bar or tool bar. My main input device is keyboard. So
   these GUI components are not usefull for me. I need to more space on my
   screen.

   Also =C-z= or =C-x C-z= keybinding (=suspend-frame=) isn't usefull for me.
  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :init
      (menu-bar-mode 0)
      (tool-bar-mode 0)
      :config
      (setq use-file-dialog nil)
      (setq use-dialog-box nil)
      (setq inhibit-splash-screen :t)
      :bind (("C-z" . nil)
             ("C-x C-z" . nil)))
  #+END_SRC
** Customize scroll bars
   Scroll bar is may be usefull then other GUI components. I'm used to seeing
   scroll bar to the right of the screen. So I moved to scroll bar from left to
   right of the screen. However, there is no need for a scroll bar in the
   minibuffer.

   #+BEGIN_SRC emacs-lisp
     (use-package emacs
       :init
       (set-scroll-bar-mode 'right)
       (set-face-foreground 'scroll-bar "darkorange")
       (set-window-scroll-bars (minibuffer-window) nil nil))
   #+END_SRC
** Customize cursor color
   Just change the color of the cursor.

   #+BEGIN_SRC emacs-lisp
     (use-package emacs
       :init
       (set-face-background 'cursor "darkorange"))
   #+END_SRC
** Load theme
   #+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :ensure
    :init
    (load-theme 'gruvbox-dark-medium :t))
   #+END_SRC
** Set default font and configure font resizing
   #+BEGIN_SRC emacs-lisp
     (setq eren/default-font "JetBrains Mono")
     (setq eren/default-font-size 11)
     (setq eren/current-font-size eren/default-font-size)

     (setq eren/font-change-increment 1.0)

     (defun eren/font-code ()
       "Return a string representing the current font (like \"Inconsolata-14\")."
       (concat eren/default-font "-" (number-to-string eren/current-font-size)))

     (defun eren/set-font-size ()
       "Set the font to `eren/default-font' at `eren/current-font-size'.
       Set that for the current frame, and also make it the default for
       other, future frames."
       (let ((font-code (eren/font-code)))
         (add-to-list 'default-frame-alist (cons 'font font-code))
         (set-frame-font font-code)))

     (defun eren/reset-font-size ()
       "Change font size back to `eren/default-font-size'."
       (interactive)
         (setq eren/current-font-size eren/default-font-size)
         (eren/set-font-size))

     (defun eren/increase-font-size ()
       "Increase current font size by a factor of `eren/font-change-increment'."
       (interactive)
       (setq eren/current-font-size
             (ceiling (* eren/current-font-size eren/font-change-increment)))
       (eren/set-font-size))

     (defun eren/decrease-font-size ()
       "Decrease current font size by a factor of `eren/font-change-increment', down to a minimum size of 1."
       (interactive)
       (setq eren/current-font-size
             (max 1
                  (floor (/ eren/current-font-size eren/font-change-increment))))
       (eren/set-font-size))

     (define-key global-map (kbd "C-)") 'eren/reset-font-size)
     (define-key global-map (kbd "C-+") 'eren/increase-font-size)
     (define-key global-map (kbd "C--") 'eren/decrease-font-size)

     (eren/reset-font-size)
   #+END_SRC
** Use =diminish= and =delight=
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure)
     (use-package delight
       :ensure)
   #+END_SRC

   Define macros:
   #+BEGIN_SRC emacs-lisp
     (defmacro diminish-minor-mode (filename mode &optional abbrev)
       `(eval-after-load (symbol-name ,filename)
          '(diminish ,mode ,abbrev)))

     (defmacro diminish-major-mode (mode-hook abbrev)
       `(add-hook ,mode-hook
                  (lambda () (setq mode-name ,abbrev))))
   #+END_SRC

   Diminish modes:
   #+BEGIN_SRC emacs-lisp
     (diminish-minor-mode 'abbrev 'abbrev-mode)
     (diminish-minor-mode 'eldoc 'eldoc-mode)
     (diminish-minor-mode 'simple 'auto-fill-function)
     (diminish-minor-mode 'subword 'subword-mode)

     (diminish-major-mode 'emacs-lisp-mode-hook "el")
     (diminish-major-mode 'lisp-interaction-mode-hook "λ")
   #+END_SRC
** Highlight the current line
  #+BEGIN_SRC emacs-lisp
    (use-package hl-line
      :init
      (global-hl-line-mode :t))
  #+END_SRC
** Show line numbers only programming mode
  #+BEGIN_SRC emacs-lisp
    (use-package display-line-numbers-mode
      :diminish
      :hook prog-mode)
  #+END_SRC
** Show line and column numbers in modeline
  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :init
      (column-number-mode :t))
  #+END_SRC
** Golden ratio for windows
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure
    :diminish
    :init
    (golden-ratio-mode :t))
#+END_SRC
** Configure =whitespace-mode=
  #+BEGIN_SRC emacs-lisp
    (use-package whitespace
      :diminish
      :config
      (defun eren/set-whitespace-style ()
        (setq whitespace-style '(face tabs spaces trailing space-before-tab
                                      newline indentation empty space-after-tab
                                      space-mark tab-mark)))
      :hook ((whitespace-mode . eren/set-whitespace-style)
             (prog-mode . whitespace-mode))
      :bind (("<f6>" . whitespace-mode)))
  #+END_SRC
** Display battery informations on modeline
  #+BEGIN_SRC emacs-lisp
    (use-package battery
      :config
      (setq battery-mode-line-format "[%b%p%% - %t]")
      :init
      (display-battery-mode :t))
  #+END_SRC
** Enable file icons with =all-the-icons=
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure)
    (use-package all-the-icons-dired
      :ensure
      :hook (dired-mode . all-the-icons-dired-mode))
  #+END_SRC
** List directories first on dired mode
  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :config
      (defun directory-first-sort ()
        "Sort dired listings with directories first."
        (save-excursion
          (let (buffer-read-only)
            (forward-line 2) ;; beyond dir. header
            (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
          (set-buffer-modified-p nil)))
      (defadvice dired-readin
          (after dired-after-updating-hook first () activate)
        "Sort dired listings with directories first before adding marks."
        (directory-first-sort)))
  #+END_SRC
** =treemacs=
  #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure
      :config
      (defun eren/treemacs-ignore-tags-files (filename absolute-path)
        (or (string-equal filename "GPATH")
            (string-equal filename "GTAGS")
            (string-equal filename "GRTAGS")))

      (defun eren/treemacs-ignore-node_modules (filename absolute-path)
        (string-equal filename "node_modules"))
      (progn
        (add-to-list 'treemacs-ignored-file-predicates #'eren/treemacs-ignore-tags-files)
        (add-to-list 'treemacs-ignored-file-predicates #'eren/treemacs-ignore-node_modules))
      :bind
      (:map global-map
            ("M-0" . treemacs-select-window)))
  #+END_SRC
* (Ma)git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure
      :bind (("C-x g" . magit-status)
             ("C-x C-g" . magit-status)))
  #+END_SRC
** Highlight uncommitted changes
  #+BEGIN_SRC emacs-lisp
    (use-package diff-hl
      :ensure
      :hook ((prog-mode . turn-on-diff-hl-mode)
       (vc-dir . turn-on-diff-hl-mode)
       (dired-mode . turn-on-diff-hl-mode)))
  #+END_SRC
* Programming environments
  Set default =tab-width= to 2.
  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :config
      (setq-default tab-width 2
                    indent-tabs-mode nil))
  #+END_SRC
** Javascript
   Indent 2 spaces
   #+BEGIN_SRC emacs-lisp
     (use-package js
       :config
       (setq js-indent-level 2))
   #+END_SRC
** Lispy
   Define =lispy-mode-hooks=:
   #+BEGIN_SRC emacs-lisp
     (setq lispy-mode-hooks '(clojure-mode-hook
                              emacs-lisp-mode-hook
                              lisp-mode-hook
                              scheme-mode-hook))
   #+END_SRC

   and set =show-paren-style= of each mode's:
   #+BEGIN_SRC emacs-lisp
     (dolist (hook lispy-mode-hooks)
       (add-hook hook (lambda () (setq show-paren-style 'expression))))
   #+END_SRC
*** Paredit Mode
    #+BEGIN_SRC emacs-lisp
      (use-package paredit
        :delight
        (paredit-mode " π")
        :ensure
        :hook ((clojure-mode . paredit-mode)
               (emacs-lisp-mode . paredit-mode)
               (lisp-mode . paredit-mode)
               (scheme-mode . paredit-mode)))
    #+END_SRC
*** Rainbowbow Delimeters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :ensure
        :hook ((clojure-mode . rainbow-delimiters-mode)
               (emacs-lisp-mode . rainbow-delimiters-mode)
               (lisp-mode . rainbow-delimiters-mode)
               (scheme-mode . rainbow-delimiters-mode)))
    #+END_SRC
** shell
Indent with 2 spaces.
#+BEGIN_SRC emacs-lisp
  (use-package sh-script
    :config
    (setq sh-basic-offset 2
          sh-indentation 2))
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC
** =yasnippet=
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure
    :diminish yas-minor-mode
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
    :init
    (yas-global-mode t)
    (yas-reload-all))
#+END_SRC
* Org-mode
** Display preferences
Pretty bullets instead of a list of asterisks
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure
    :hook (org-mode . org-bullets-mode))
#+END_SRC

Little downward-pointing arrow instead of the usual ellipsis(=...=)
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵")
#+END_SRC

Use syntax highlighting in source blocks while editing.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

No space before tags:
#+BEGIN_SRC emacs-lisp
  (setq org-tags-column 0)
#+END_SRC

UTF-8 entities
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
** =org-cliplink=
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :ensure
    :bind (("C-x p i" . 'org-cliplink)))
#+END_SRC
* Navigating
** Smooth Scrolling
   [[https://www.emacswiki.org/emacs/SmoothScrolling][Source]]

5 line at a time:
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(5 ((shift) . 5)))
#+END_SRC

Don't accelerate scrolling:
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC

Scroll window under mouse:
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-follow-mouse 't)
#+END_SRC

Keyboard scroll 5 line at time:
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
#+END_SRC
* Editing preferences
** =utf-8= everywhere
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (setq default-buffer-file-coding-system 'utf-8)
   #+END_SRC
** Always delete active region
#+BEGIN_SRC emacs-lisp
  (setq delete-active-region nil)
  (delete-selection-mode t)
#+END_SRC
** Always kill current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'utils/kill-current-buffer)
#+END_SRC
** Save my location within a file
#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC
** Ignore case-sensivity when find file
#+BEGIN_SRC emacs-lisp
  (setq read-file-name-completion-ignore-case t)
#+END_SRC
** Configure =which-key=
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure
    :diminish
    :init
    (which-key-mode))
#+END_SRC
** Configure =ido-mode=
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :ensure
    :config
    (setq ido-enable-flex-matching t
          ido-use-faces nil
          ido-auto-merge-work-directories-length -1)
    :init
    (ido-mode t)
    (ido-everywhere t)
    (flx-ido-mode t))
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure
    :bind (("M-x" . 'smex)))
#+END_SRC
** =editorconfig= everywhere
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure
    :diminish
    :config
    (editorconfig-mode t))
#+END_SRC
** Always =server-mode=
#+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (or (server-running-p) (server-mode)))
#+END_SRC
** =undo-tree=
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure
    :diminish
    :init
    (global-undo-tree-mode))
#+END_SRC
** Move text up or down
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :ensure
    :init
    (move-text-default-bindings))
#+END_SRC
** Use =company-mode= everywhere
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure
    :init
    (global-company-mode t))
#+END_SRC
* Set custom keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
* Backup
Change backup files location
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
* =browse-url.el=
Set default browser to =qutebrowser=
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "qutebrowser")
#+END_SRC
